# -*- coding: utf-8 -*-
"""Llama3.2_(1B_and_3B)-Conversational.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/unslothai/notebooks/blob/main/nb/Llama3.2_(1B_and_3B)-Conversational.ipynb

### Installation
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# import os
# if "COLAB_" not in "".join(os.environ.keys()):
#     !pip install unsloth
# else:
#     # Do this only in Colab notebooks! Otherwise use pip install unsloth
#     !pip install --no-deps bitsandbytes accelerate xformers==0.0.29.post3 peft trl==0.15.2 triton cut_cross_entropy unsloth_zoo
#     !pip install sentencepiece protobuf "datasets>=3.4.1" huggingface_hub hf_transfer
#     !pip install transformers==4.51.3
#     !pip install --no-deps unsloth

"""### Unsloth"""

from unsloth import FastLanguageModel
import torch
max_seq_length = 2048 # Choose any! We auto support RoPE Scaling internally!
dtype = None # None for auto detection. Float16 for Tesla T4, V100, Bfloat16 for Ampere+
load_in_4bit = True # Use 4bit quantization to reduce memory usage. Can be False.



model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = "unsloth/Llama-3.2-3B-Instruct", # or choose "unsloth/Llama-3.2-1B-Instruct"
    max_seq_length = max_seq_length,
    dtype = dtype,
    load_in_4bit = load_in_4bit,
    # token = "hf_...", # use one if using gated models like meta-llama/Llama-2-7b-hf
)

"""We now add LoRA adapters so we only need to update 1 to 10% of all parameters!"""

model = FastLanguageModel.get_peft_model(
    model,
    r = 16, # Choose any number > 0 ! Suggested 8, 16, 32, 64, 128
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                      "gate_proj", "up_proj", "down_proj",],
    lora_alpha = 16,
    lora_dropout = 0, # Supports any, but = 0 is optimized
    bias = "none",    # Supports any, but = "none" is optimized
    # [NEW] "unsloth" uses 30% less VRAM, fits 2x larger batch sizes!
    use_gradient_checkpointing = "unsloth", # True or "unsloth" for very long context
    random_state = 3407,
    use_rslora = False,  # We support rank stabilized LoRA
    loftq_config = None, # And LoftQ
)

# 1. Load dataset
dataset = load_dataset("blue-blues/medical_cot", split="train")

# 2. Apply formatting function BEFORE tokenization
def formatting_prompts_func(batch):
    texts = []
    for system, question, answer in zip(batch["system_prompt"], batch["question"], batch["response"]):
        prompt = (
            f"<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n\n{system}<|eot_id|>"
            f"<|start_header_id|>user<|end_header_id|>\n\n{question}<|eot_id|>"
            f"<|start_header_id|>assistant<|end_header_id|>\n\n{answer}<|eot_id|>"
        )
        texts.append(prompt)
    return {"text": texts}

dataset = dataset.map(formatting_prompts_func, batched=True, num_proc=8)

dataset = dataset.train_test_split(test_size=0.0025, seed=42)  # adjust as needed
train_dataset = dataset["train"]
val_dataset = dataset["test"]

!pip install rouge-score

from rouge_score import rouge_scorer

def calculate_rouge(model, tokenizer, dataset, num_samples=20):
    model.eval()
    preds, refs = [], []

    for example in dataset.select(range(num_samples)):
        # Extract from text using special token format
        full_text = example["text"]
        try:
            system = full_text.split("<|start_header_id|>user<|end_header_id|>\n\n")[0].replace("<|begin_of_text|>", "")
            user = full_text.split("<|start_header_id|>user<|end_header_id|>\n\n")[1].split("<|eot_id|>")[0]
            ref = full_text.split("<|start_header_id|>assistant<|end_header_id|>\n\n")[1].split("<|eot_id|>")[0]
        except Exception:
            continue

        messages = [
            {"role": "system", "content": system},
            {"role": "user", "content": user},
        ]

        inputs = tokenizer.apply_chat_template(
            messages,
            tokenize=True,
            add_generation_prompt=True,
            return_tensors="pt",
            padding=True,
        ).to("cuda")

        attention_mask = (inputs != tokenizer.pad_token_id).long()

        outputs = model.generate(
            input_ids=inputs,
            attention_mask=attention_mask,
            max_new_tokens=256,
            use_cache=True,
            temperature=1.0,
            min_p=0.1,
        )

        decoded = tokenizer.decode(outputs[0], skip_special_tokens=True).strip()
        preds.append(decoded)
        refs.append(ref)

    scorer = rouge_scorer.RougeScorer(['rougeL'], use_stemmer=True)
    scores = [scorer.score(r, p)['rougeL'].fmeasure for r, p in zip(refs, preds)]
    return sum(scores) / len(scores)

# üëá Add before training to record baseline
FastLanguageModel.for_inference(model)
print("üîç ROUGE-L before fine-tuning:")
rouge_before = calculate_rouge(model, tokenizer, val_dataset)
print(f"ROUGE-L Before: {rouge_before:.4f}")

"""<a name="Train"></a>
### Train the model
Now let's use Huggingface TRL's `SFTTrainer`! More docs here: [TRL SFT docs](https://huggingface.co/docs/trl/sft_trainer). We do 60 steps to speed things up, but you can set `num_train_epochs=1` for a full run, and turn off `max_steps=None`. We also support TRL's `DPOTrainer`!
"""

from trl import SFTTrainer
from transformers import TrainingArguments, DataCollatorForSeq2Seq
from unsloth import is_bfloat16_supported

trainer = SFTTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = train_dataset,     # ‚úÖ correct here
    dataset_text_field = "text",
    max_seq_length = max_seq_length,
    data_collator = DataCollatorForSeq2Seq(tokenizer = tokenizer),
    dataset_num_proc = 2,
    packing = False,
    formatting_func = formatting_prompts_func,
    args = TrainingArguments(
        per_device_train_batch_size = 2,
        gradient_accumulation_steps = 4,
        warmup_steps = 5,
        max_steps = 60,
        learning_rate = 2e-4,
        fp16 = not is_bfloat16_supported(),
        bf16 = is_bfloat16_supported(),
        logging_steps = 1,
        optim = "adamw_8bit",
        weight_decay = 0.01,
        lr_scheduler_type = "linear",
        seed = 3407,
        output_dir = "outputs",
        report_to = "none",
    ),
)

from unsloth.chat_templates import train_on_responses_only
trainer = train_on_responses_only(
    trainer,
    instruction_part="<|start_header_id|>user<|end_header_id|>\n\n",
    response_part="<|start_header_id|>assistant<|end_header_id|>\n\n",
)

trainer.train()

# üëá Evaluate after training
FastLanguageModel.for_inference(model)
print("üîç ROUGE-L after fine-tuning:")
rouge_after = calculate_rouge(model, tokenizer, val_dataset)
print(f"ROUGE-L After: {rouge_after:.4f}")

# Save the fine-tuned model locally
model.save_pretrained("lora_model")
tokenizer.save_pretrained("lora_model")

model.push_to_hub("shumailajaved12/llama3-medical-lora")
tokenizer.push_to_hub("shumailajaved12/llama3-medical-lora")